const fs = require('fs')
const html = require('html')
const util = require('util')

const config = require('../config.json')
const package = require('../package.json')

const readdirPromise = util.promisify(fs.readdir)
const readFilePromise = util.promisify(fs.readFile)
const copyFilePromise = util.promisify(fs.copyFile)
const writeFilePromise = util.promisify(fs.writeFile)
const mkdirPromise = util.promisify(fs.mkdir)

class Blog {
	constuctor({
		title='',
		subtitle='',
		blurb='',
		cover='',
		coverCredit='',
		published='',
		updated='',
		author='',
		latest=false,
		featured=false,
		tags=[],
		content=[]
	}) {

	}
}

class Project {
	constuctor({
		name='',
		blurb='',
		description='',
		technologies=[],
		source='',
		install='',
		documentation='',
		cover='',
		links={},
		content=[]
	}) {

	}
}

// TODO: rename to 'forgeHeader' or something like that
// replace key {{generationHeader}} with the generated header
const buildGenerationHeader = async (template) => {
	let data = await readFilePromise(template)
	data = data.toString()
	const now = Date().toLocaleString()
	headerData = []
	headerData.push('<!-- This is an autogenerated file - DO NOT EDIT DIRECTLY -->')
	headerData.push(`<!-- This file was generated on ${now} based on template '${template}' via the forge in willcarh.art v${package.version}-->`)
	headerData.push('<!-- Learn more: https://github.com/wcarhart/willcarh.art -->')
	data = data.replace(`{{generationHeader}}`, headerData.join('\n'))
	return data
}

// TODO: add options to replace the following:
// {{css:...}}
// {{ico:...}}
// {{font:...}}
// {{content:...}}
//   can be one of exp_all, proj_all, proj_feat, blog_all, blog_latest, blog_feat
// {{sys:...}} --> e.g. {{sys:header}}
// {{cdn:...}}

// resolve {{cdn:...}} tags to images
const resolveImages = async (data) => {
	const cdn = config.cdn
	if (cdn === undefined || cdn === null) {
		throw new Error('CDN not defined in config.json')
	}
	const regex = /\{\{cdn:.*\}\}/g
	const matches = data.match(regex)
	let processedData = data
	if (matches !== null) {
		for (let match of matches) {
			let img = match.replace('{{', '').replace('}}', '').replace('cdn:', cdn)
			processedData = processedData.replace(match, img)
		}
	}
	return processedData
}

// generate HTML files based on page type
const generate = async (page) => {
	try {
		await fs.promises.access('src')
	} catch (e) {
		await mkdirPromise('src')
	}
	switch (page) {
		case 'home':
			await buildPageFromTemplate('templates/home.html', 'index.html')
			await buildHome()
			break
		case 'about':
			await buildAbout()
			break
		case 'blog':
			await buildBlogIndex()
			await buildBlogPosts()
			break
		case 'projects':
			await buildProjectIndex()
			await buildProjectPages()
			break
		case 'apps':
			break
		default:
			throw new Exception(`Unknown page '${page}'`)
	}
}

const buildPageFromTemplate = async (template, page) {
	let data = readFilePromise(template)
	data = data.toString()

}

// TODO: this will get repetitive very fast
const buildHome = async () => {
	console.log('Building home page...')
	let data = await buildGenerationHeader('templates/home.html')
	data = await resolveImages(data)
	await writeFilePromise('index.html', data)
}

const buildAbout = async () => {
	console.log('Building about page...')
	let data = await buildGenerationHeader('templates/about.html')
	data = await resolveImages(data)
	await writeFilePromise('src/about.html', data)

	// let jsData = await readFilePromise('js/profilephoto.js')
	// jsData = jsData.toString()
	// jsData = await resolveImages(jsData)
	// await writeFilePromise('src/about.html', jsData)
}

const buildBlogIndex = async () => {
	console.log('Building blog...')
	return
}

const buildBlogPosts = async () => {
	let posts = await findFiles('blog')
	for (let post of posts) {
		console.log(`  Found post ${post}...`)
	}
}

const buildProjectIndex = async () => {
	console.log('Building projects...')
	let data = await buildGenerationHeader('templates/project_index.html')
	data = await resolveImages(data)
	await writeFilePromise('src/project_index.html', data)
}

const buildProjectPages = async () => {
	let projects = await findFiles('projects')
	for (let project of projects) {
		console.log(`  Found project ${project}...`)
	}
}

const findFiles = async (kind) => {
	let files = await readdirPromise(`content/${kind}`)
	files = files.flatMap(file => file !== 'index.md' ? file : [])
	return files
}

module.exports = {
	generate: generate
}